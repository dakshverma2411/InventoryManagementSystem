/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.techt.informationmanagementsystem;

import com.techt.inventorymanagementsystem.exceptions.InvalidItemIdException;
import com.techt.inventorymanagementsystem.exceptions.InvalidItemQuantity;
import com.techt.inventorymanagementsystem.models.Inventory;
import com.techt.inventorymanagementsystem.models.Item;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 *
 * @author Daksh
 */
public class InformationManagementSystemTest {
    
    
    // since there can be only one inventory in our application, we can use singleton pattern to create inventory
    Inventory inventory = Inventory.getInstance();
    
    
    // we will use junit to write the unit tests
    @Test
    public void addItemTest() throws InvalidItemQuantity{
        
        Integer initialInventorySize = inventory.getInventory().size();
        // create an item
        // id is autogenerated
        Item item = inventory.addItem("Soap", "Soap", 10);
        
        assert("Soap".equals(item.getName()));
        assert("Soap".equals(item.getDescription()));
        assert(item.getQuantity()==10);
        assert(initialInventorySize+1 == inventory.getInventory().size());
        
    }
    
    // test when we enter item with negative qty
    @Test(expected = InvalidItemQuantity.class)
    public void addInvalidItemTest() throws InvalidItemQuantity{
        
        Integer initialInventorySize = inventory.getInventory().size();
        // create an item
        // id is autogenerated
        Item item = inventory.addItem("Soap", "Soap", -10);
        
    }
    
    // test for removing an item
    @Test
    public void removeItemTest() throws InvalidItemQuantity, InvalidItemIdException{
        
        Integer initialInventorySize = inventory.getInventory().size();
        // create an item
        // id is autogenerated
        Item item = inventory.addItem("Soap", "Soap", 10);
        String id = item.getId();
        
        inventory.removeItem(id);
        assert(initialInventorySize == inventory.getInventory().size());        
    }
    
    // test for remove item that does not exists
    
    @Test(expected = InvalidItemIdException.class)
    public void removeInvalidItem() throws InvalidItemIdException{
        inventory.removeItem("abc");
    }
    
    // test for updating item
    @Test
    public void updateItemTest() throws InvalidItemQuantity, InvalidItemIdException{
        
        // create an item
        // id is autogenerated
        Item item = inventory.addItem("Soap", "Soap", 10);
        
        Integer initialInventorySize = inventory.getInventory().size();

        inventory.updateItem(item.getId(), item.getName(), "Soap2", item.getQuantity());
        assert(item.getDescription().equals("Soap2"));
        assert(inventory.getInventory().size() == initialInventorySize);
        
    }
    
    @Test(expected = InvalidItemIdException.class)
    public void updateInvalidItem() throws InvalidItemQuantity, InvalidItemIdException{
        Item item = inventory.addItem("Soap", "Soap", 10);
        
        Integer initialInventorySize = inventory.getInventory().size();

        inventory.updateItem("abc", item.getName(), "Soap2", item.getQuantity());
    }
    
    // seting qty to negative on update
    @Test(expected = InvalidItemQuantity.class)
    public void updateItemInvalidQtyTest() throws InvalidItemQuantity, InvalidItemIdException{
        
        // create an item
        // id is autogenerated
        Item item = inventory.addItem("Soap", "Soap", 10);
        
        Integer initialInventorySize = inventory.getInventory().size();

        inventory.updateItem(item.getId(), item.getName(), "Soap2", -2);
        
    }
    
    // all update, add and remove are working fine.
    
    @Test
    public void getInventoryTest() throws InvalidItemQuantity{
        
        Integer initialSize = inventory.getInventory().size();
        
        Item item1 = inventory.addItem("Soap1", "Soap", 10);
        Item item2 = inventory.addItem("Soap2", "Soap", 10);
        Item item3 = inventory.addItem("Soap3", "Soap", 10);
        Item item4 = inventory.addItem("Soap4", "Soap", 10);
        assert(inventory.getInventory().size()==4+initialSize);
    }
    
    
    
}


